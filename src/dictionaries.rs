use std::collections::HashMap;
use phf::phf_map;
use crate::hamming_distance;

const ARUCO: &'static [u64] = &[0x1084210,0x1084217,0x1084209,0x108420e,0x10842f0,0x10842f7,0x10842e9,0x10842ee,0x1084130,0x1084137,0x1084129,0x108412e,0x10841d0,0x10841d7,0x10841c9,0x10841ce,0x1085e10,0x1085e17,0x1085e09,0x1085e0e,0x1085ef0,0x1085ef7,0x1085ee9,0x1085eee,0x1085d30,0x1085d37,0x1085d29,0x1085d2e,0x1085dd0,0x1085dd7,0x1085dc9,0x1085dce,0x1082610,0x1082617,0x1082609,0x108260e,0x10826f0,0x10826f7,0x10826e9,0x10826ee,0x1082530,0x1082537,0x1082529,0x108252e,0x10825d0,0x10825d7,0x10825c9,0x10825ce,0x1083a10,0x1083a17,0x1083a09,0x1083a0e,0x1083af0,0x1083af7,0x1083ae9,0x1083aee,0x1083930,0x1083937,0x1083929,0x108392e,0x10839d0,0x10839d7,0x10839c9,0x10839ce,0x10bc210,0x10bc217,0x10bc209,0x10bc20e,0x10bc2f0,0x10bc2f7,0x10bc2e9,0x10bc2ee,0x10bc130,0x10bc137,0x10bc129,0x10bc12e,0x10bc1d0,0x10bc1d7,0x10bc1c9,0x10bc1ce,0x10bde10,0x10bde17,0x10bde09,0x10bde0e,0x10bdef0,0x10bdef7,0x10bdee9,0x10bdeee,0x10bdd30,0x10bdd37,0x10bdd29,0x10bdd2e,0x10bddd0,0x10bddd7,0x10bddc9,0x10bddce,0x10ba610,0x10ba617,0x10ba609,0x10ba60e,0x10ba6f0,0x10ba6f7,0x10ba6e9,0x10ba6ee,0x10ba530,0x10ba537,0x10ba529,0x10ba52e,0x10ba5d0,0x10ba5d7,0x10ba5c9,0x10ba5ce,0x10bba10,0x10bba17,0x10bba09,0x10bba0e,0x10bbaf0,0x10bbaf7,0x10bbae9,0x10bbaee,0x10bb930,0x10bb937,0x10bb929,0x10bb92e,0x10bb9d0,0x10bb9d7,0x10bb9c9,0x10bb9ce,0x104c210,0x104c217,0x104c209,0x104c20e,0x104c2f0,0x104c2f7,0x104c2e9,0x104c2ee,0x104c130,0x104c137,0x104c129,0x104c12e,0x104c1d0,0x104c1d7,0x104c1c9,0x104c1ce,0x104de10,0x104de17,0x104de09,0x104de0e,0x104def0,0x104def7,0x104dee9,0x104deee,0x104dd30,0x104dd37,0x104dd29,0x104dd2e,0x104ddd0,0x104ddd7,0x104ddc9,0x104ddce,0x104a610,0x104a617,0x104a609,0x104a60e,0x104a6f0,0x104a6f7,0x104a6e9,0x104a6ee,0x104a530,0x104a537,0x104a529,0x104a52e,0x104a5d0,0x104a5d7,0x104a5c9,0x104a5ce,0x104ba10,0x104ba17,0x104ba09,0x104ba0e,0x104baf0,0x104baf7,0x104bae9,0x104baee,0x104b930,0x104b937,0x104b929,0x104b92e,0x104b9d0,0x104b9d7,0x104b9c9,0x104b9ce,0x1074210,0x1074217,0x1074209,0x107420e,0x10742f0,0x10742f7,0x10742e9,0x10742ee,0x1074130,0x1074137,0x1074129,0x107412e,0x10741d0,0x10741d7,0x10741c9,0x10741ce,0x1075e10,0x1075e17,0x1075e09,0x1075e0e,0x1075ef0,0x1075ef7,0x1075ee9,0x1075eee,0x1075d30,0x1075d37,0x1075d29,0x1075d2e,0x1075dd0,0x1075dd7,0x1075dc9,0x1075dce,0x1072610,0x1072617,0x1072609,0x107260e,0x10726f0,0x10726f7,0x10726e9,0x10726ee,0x1072530,0x1072537,0x1072529,0x107252e,0x10725d0,0x10725d7,0x10725c9,0x10725ce,0x1073a10,0x1073a17,0x1073a09,0x1073a0e,0x1073af0,0x1073af7,0x1073ae9,0x1073aee,0x1073930,0x1073937,0x1073929,0x107392e,0x10739d0,0x10739d7,0x10739c9,0x10739ce,0x1784210,0x1784217,0x1784209,0x178420e,0x17842f0,0x17842f7,0x17842e9,0x17842ee,0x1784130,0x1784137,0x1784129,0x178412e,0x17841d0,0x17841d7,0x17841c9,0x17841ce,0x1785e10,0x1785e17,0x1785e09,0x1785e0e,0x1785ef0,0x1785ef7,0x1785ee9,0x1785eee,0x1785d30,0x1785d37,0x1785d29,0x1785d2e,0x1785dd0,0x1785dd7,0x1785dc9,0x1785dce,0x1782610,0x1782617,0x1782609,0x178260e,0x17826f0,0x17826f7,0x17826e9,0x17826ee,0x1782530,0x1782537,0x1782529,0x178252e,0x17825d0,0x17825d7,0x17825c9,0x17825ce,0x1783a10,0x1783a17,0x1783a09,0x1783a0e,0x1783af0,0x1783af7,0x1783ae9,0x1783aee,0x1783930,0x1783937,0x1783929,0x178392e,0x17839d0,0x17839d7,0x17839c9,0x17839ce,0x17bc210,0x17bc217,0x17bc209,0x17bc20e,0x17bc2f0,0x17bc2f7,0x17bc2e9,0x17bc2ee,0x17bc130,0x17bc137,0x17bc129,0x17bc12e,0x17bc1d0,0x17bc1d7,0x17bc1c9,0x17bc1ce,0x17bde10,0x17bde17,0x17bde09,0x17bde0e,0x17bdef0,0x17bdef7,0x17bdee9,0x17bdeee,0x17bdd30,0x17bdd37,0x17bdd29,0x17bdd2e,0x17bddd0,0x17bddd7,0x17bddc9,0x17bddce,0x17ba610,0x17ba617,0x17ba609,0x17ba60e,0x17ba6f0,0x17ba6f7,0x17ba6e9,0x17ba6ee,0x17ba530,0x17ba537,0x17ba529,0x17ba52e,0x17ba5d0,0x17ba5d7,0x17ba5c9,0x17ba5ce,0x17bba10,0x17bba17,0x17bba09,0x17bba0e,0x17bbaf0,0x17bbaf7,0x17bbae9,0x17bbaee,0x17bb930,0x17bb937,0x17bb929,0x17bb92e,0x17bb9d0,0x17bb9d7,0x17bb9c9,0x17bb9ce,0x174c210,0x174c217,0x174c209,0x174c20e,0x174c2f0,0x174c2f7,0x174c2e9,0x174c2ee,0x174c130,0x174c137,0x174c129,0x174c12e,0x174c1d0,0x174c1d7,0x174c1c9,0x174c1ce,0x174de10,0x174de17,0x174de09,0x174de0e,0x174def0,0x174def7,0x174dee9,0x174deee,0x174dd30,0x174dd37,0x174dd29,0x174dd2e,0x174ddd0,0x174ddd7,0x174ddc9,0x174ddce,0x174a610,0x174a617,0x174a609,0x174a60e,0x174a6f0,0x174a6f7,0x174a6e9,0x174a6ee,0x174a530,0x174a537,0x174a529,0x174a52e,0x174a5d0,0x174a5d7,0x174a5c9,0x174a5ce,0x174ba10,0x174ba17,0x174ba09,0x174ba0e,0x174baf0,0x174baf7,0x174bae9,0x174baee,0x174b930,0x174b937,0x174b929,0x174b92e,0x174b9d0,0x174b9d7,0x174b9c9,0x174b9ce,0x1774210,0x1774217,0x1774209,0x177420e,0x17742f0,0x17742f7,0x17742e9,0x17742ee,0x1774130,0x1774137,0x1774129,0x177412e,0x17741d0,0x17741d7,0x17741c9,0x17741ce,0x1775e10,0x1775e17,0x1775e09,0x1775e0e,0x1775ef0,0x1775ef7,0x1775ee9,0x1775eee,0x1775d30,0x1775d37,0x1775d29,0x1775d2e,0x1775dd0,0x1775dd7,0x1775dc9,0x1775dce,0x1772610,0x1772617,0x1772609,0x177260e,0x17726f0,0x17726f7,0x17726e9,0x17726ee,0x1772530,0x1772537,0x1772529,0x177252e,0x17725d0,0x17725d7,0x17725c9,0x17725ce,0x1773a10,0x1773a17,0x1773a09,0x1773a0e,0x1773af0,0x1773af7,0x1773ae9,0x1773aee,0x1773930,0x1773937,0x1773929,0x177392e,0x17739d0,0x17739d7,0x17739c9,0x17739ce,0x984210,0x984217,0x984209,0x98420e,0x9842f0,0x9842f7,0x9842e9,0x9842ee,0x984130,0x984137,0x984129,0x98412e,0x9841d0,0x9841d7,0x9841c9,0x9841ce,0x985e10,0x985e17,0x985e09,0x985e0e,0x985ef0,0x985ef7,0x985ee9,0x985eee,0x985d30,0x985d37,0x985d29,0x985d2e,0x985dd0,0x985dd7,0x985dc9,0x985dce,0x982610,0x982617,0x982609,0x98260e,0x9826f0,0x9826f7,0x9826e9,0x9826ee,0x982530,0x982537,0x982529,0x98252e,0x9825d0,0x9825d7,0x9825c9,0x9825ce,0x983a10,0x983a17,0x983a09,0x983a0e,0x983af0,0x983af7,0x983ae9,0x983aee,0x983930,0x983937,0x983929,0x98392e,0x9839d0,0x9839d7,0x9839c9,0x9839ce,0x9bc210,0x9bc217,0x9bc209,0x9bc20e,0x9bc2f0,0x9bc2f7,0x9bc2e9,0x9bc2ee,0x9bc130,0x9bc137,0x9bc129,0x9bc12e,0x9bc1d0,0x9bc1d7,0x9bc1c9,0x9bc1ce,0x9bde10,0x9bde17,0x9bde09,0x9bde0e,0x9bdef0,0x9bdef7,0x9bdee9,0x9bdeee,0x9bdd30,0x9bdd37,0x9bdd29,0x9bdd2e,0x9bddd0,0x9bddd7,0x9bddc9,0x9bddce,0x9ba610,0x9ba617,0x9ba609,0x9ba60e,0x9ba6f0,0x9ba6f7,0x9ba6e9,0x9ba6ee,0x9ba530,0x9ba537,0x9ba529,0x9ba52e,0x9ba5d0,0x9ba5d7,0x9ba5c9,0x9ba5ce,0x9bba10,0x9bba17,0x9bba09,0x9bba0e,0x9bbaf0,0x9bbaf7,0x9bbae9,0x9bbaee,0x9bb930,0x9bb937,0x9bb929,0x9bb92e,0x9bb9d0,0x9bb9d7,0x9bb9c9,0x9bb9ce,0x94c210,0x94c217,0x94c209,0x94c20e,0x94c2f0,0x94c2f7,0x94c2e9,0x94c2ee,0x94c130,0x94c137,0x94c129,0x94c12e,0x94c1d0,0x94c1d7,0x94c1c9,0x94c1ce,0x94de10,0x94de17,0x94de09,0x94de0e,0x94def0,0x94def7,0x94dee9,0x94deee,0x94dd30,0x94dd37,0x94dd29,0x94dd2e,0x94ddd0,0x94ddd7,0x94ddc9,0x94ddce,0x94a610,0x94a617,0x94a609,0x94a60e,0x94a6f0,0x94a6f7,0x94a6e9,0x94a6ee,0x94a530,0x94a537,0x94a529,0x94a52e,0x94a5d0,0x94a5d7,0x94a5c9,0x94a5ce,0x94ba10,0x94ba17,0x94ba09,0x94ba0e,0x94baf0,0x94baf7,0x94bae9,0x94baee,0x94b930,0x94b937,0x94b929,0x94b92e,0x94b9d0,0x94b9d7,0x94b9c9,0x94b9ce,0x974210,0x974217,0x974209,0x97420e,0x9742f0,0x9742f7,0x9742e9,0x9742ee,0x974130,0x974137,0x974129,0x97412e,0x9741d0,0x9741d7,0x9741c9,0x9741ce,0x975e10,0x975e17,0x975e09,0x975e0e,0x975ef0,0x975ef7,0x975ee9,0x975eee,0x975d30,0x975d37,0x975d29,0x975d2e,0x975dd0,0x975dd7,0x975dc9,0x975dce,0x972610,0x972617,0x972609,0x97260e,0x9726f0,0x9726f7,0x9726e9,0x9726ee,0x972530,0x972537,0x972529,0x97252e,0x9725d0,0x9725d7,0x9725c9,0x9725ce,0x973a10,0x973a17,0x973a09,0x973a0e,0x973af0,0x973af7,0x973ae9,0x973aee,0x973930,0x973937,0x973929,0x97392e,0x9739d0,0x9739d7,0x9739c9,0x9739ce,0xe84210,0xe84217,0xe84209,0xe8420e,0xe842f0,0xe842f7,0xe842e9,0xe842ee,0xe84130,0xe84137,0xe84129,0xe8412e,0xe841d0,0xe841d7,0xe841c9,0xe841ce,0xe85e10,0xe85e17,0xe85e09,0xe85e0e,0xe85ef0,0xe85ef7,0xe85ee9,0xe85eee,0xe85d30,0xe85d37,0xe85d29,0xe85d2e,0xe85dd0,0xe85dd7,0xe85dc9,0xe85dce,0xe82610,0xe82617,0xe82609,0xe8260e,0xe826f0,0xe826f7,0xe826e9,0xe826ee,0xe82530,0xe82537,0xe82529,0xe8252e,0xe825d0,0xe825d7,0xe825c9,0xe825ce,0xe83a10,0xe83a17,0xe83a09,0xe83a0e,0xe83af0,0xe83af7,0xe83ae9,0xe83aee,0xe83930,0xe83937,0xe83929,0xe8392e,0xe839d0,0xe839d7,0xe839c9,0xe839ce,0xebc210,0xebc217,0xebc209,0xebc20e,0xebc2f0,0xebc2f7,0xebc2e9,0xebc2ee,0xebc130,0xebc137,0xebc129,0xebc12e,0xebc1d0,0xebc1d7,0xebc1c9,0xebc1ce,0xebde10,0xebde17,0xebde09,0xebde0e,0xebdef0,0xebdef7,0xebdee9,0xebdeee,0xebdd30,0xebdd37,0xebdd29,0xebdd2e,0xebddd0,0xebddd7,0xebddc9,0xebddce,0xeba610,0xeba617,0xeba609,0xeba60e,0xeba6f0,0xeba6f7,0xeba6e9,0xeba6ee,0xeba530,0xeba537,0xeba529,0xeba52e,0xeba5d0,0xeba5d7,0xeba5c9,0xeba5ce,0xebba10,0xebba17,0xebba09,0xebba0e,0xebbaf0,0xebbaf7,0xebbae9,0xebbaee,0xebb930,0xebb937,0xebb929,0xebb92e,0xebb9d0,0xebb9d7,0xebb9c9,0xebb9ce,0xe4c210,0xe4c217,0xe4c209,0xe4c20e,0xe4c2f0,0xe4c2f7,0xe4c2e9,0xe4c2ee,0xe4c130,0xe4c137,0xe4c129,0xe4c12e,0xe4c1d0,0xe4c1d7,0xe4c1c9,0xe4c1ce,0xe4de10,0xe4de17,0xe4de09,0xe4de0e,0xe4def0,0xe4def7,0xe4dee9,0xe4deee,0xe4dd30,0xe4dd37,0xe4dd29,0xe4dd2e,0xe4ddd0,0xe4ddd7,0xe4ddc9,0xe4ddce,0xe4a610,0xe4a617,0xe4a609,0xe4a60e,0xe4a6f0,0xe4a6f7,0xe4a6e9,0xe4a6ee,0xe4a530,0xe4a537,0xe4a529,0xe4a52e,0xe4a5d0,0xe4a5d7,0xe4a5c9,0xe4a5ce,0xe4ba10,0xe4ba17,0xe4ba09,0xe4ba0e,0xe4baf0,0xe4baf7,0xe4bae9,0xe4baee,0xe4b930,0xe4b937,0xe4b929,0xe4b92e,0xe4b9d0,0xe4b9d7,0xe4b9c9,0xe4b9ce,0xe74210,0xe74217,0xe74209,0xe7420e,0xe742f0,0xe742f7,0xe742e9,0xe742ee,0xe74130,0xe74137,0xe74129,0xe7412e,0xe741d0,0xe741d7,0xe741c9,0xe741ce,0xe75e10,0xe75e17,0xe75e09,0xe75e0e,0xe75ef0,0xe75ef7,0xe75ee9,0xe75eee,0xe75d30,0xe75d37,0xe75d29,0xe75d2e,0xe75dd0,0xe75dd7,0xe75dc9,0xe75dce,0xe72610,0xe72617,0xe72609,0xe7260e,0xe726f0,0xe726f7,0xe726e9,0xe726ee,0xe72530,0xe72537,0xe72529,0xe7252e,0xe725d0,0xe725d7,0xe725c9,0xe725ce,0xe73a10,0xe73a17,0xe73a09,0xe73a0e,0xe73af0,0xe73af7,0xe73ae9,0xe73aee,0xe73930,0xe73937,0xe73929,0xe7392e,0xe739d0,0xe739d7,0xe739c9];
const ARUCO_DEFAULT: &'static [u64] = ARUCO;
const ARUCO_MIP_36H12: &'static [u64] = &[0xd2b63a09d,0x6001134e5,0x1206fbe72,0xff8ad6cb4,0x85da9bc49,0xb461afe9c,0x6db51fe13,0x5248c541f,0x8f34503,0x8ea462ece,0xeac2be76d,0x1af615c44,0xb48a49f27,0x2e4e1283b,0x78b1f2fa8,0x27d34f57e,0x89222fff1,0x4c1669406,0xbf49b3511,0xdc191cd5d,0x11d7c3f85,0x16a130e35,0xe29f27eff,0x428d8ae0c,0x90d548477,0x2319cbc93,0xc3b0c3dfc,0x424bccc9,0x2a081d630,0x762743d96,0xd0645bf19,0xf38d7fd60,0xc6cbf9a10,0x3c1be7c65,0x276f75e63,0x4490a3f63,0xda60acd52,0x3cc68df59,0xab46f9dae,0x88d533d78,0xb6d62ec21,0xb3c02b646,0x22e56d408,0xac5f5770a,0xaaa993f66,0x4caa07c8d,0x5c9b4f7b0,0xaa9ef0e05,0x705c5750,0xac81f545e,0x735b91e74,0x8cc35cee4,0xe44694d04,0xb5e121de0,0x261017d0f,0xf1d439eb5,0xa1a33ac96,0x174c62c02,0x1ee27f716,0x8b1c5ece9,0x6a05b0c6a,0xd0568dfc,0x192d25e5f,0x1adbeccc8,0xcfec87f00,0xd0b9dde7a,0x88dcef81e,0x445681cb9,0xdbb2ffc83,0xa48d96df1,0xb72cc2e7d,0xc295b53f,0xf49832704,0x9968edc29,0x9e4e1af85,0x8683e2d1b,0x810b45c04,0x6ac44bfe2,0x645346615,0x3990bd598,0x1c9ed0f6a,0xc26729d65,0x83993f795,0x3ac05ac5d,0x357adff3b,0xd5c05565,0x2f547ef44,0x86c115041,0x640fd9e5f,0xce08bbcf7,0x109bb343e,0xc21435c92,0x35b4dfce4,0x459752cf2,0xec915b82c,0x51881eed0,0x2dda7dc97,0x2e0142144,0x42e890f99,0x9a8856527,0x8e80d9d80,0x891cbcf34,0x25dd82410,0x239551d34,0x8fe8f0c70,0x94106a970,0x82609b40c,0xfc9caf36,0x688181d11,0x718613c08,0xf1ab7629,0xa357bfc18,0x4c03b7a46,0x204dedce6,0xad6300d37,0x84cc4cd09,0x42160e5c4,0x87d2adfa8,0x7850e7749,0x4e750fc7c,0xbf2e5dfda,0xd88324da5,0x234b52f80,0x378204514,0xabdf2ad53,0x365e78ef9,0x49caa6ca2,0x3c39ddf3,0xc68c5385d,0x5bfcbbf67,0x623241e21,0xabc90d5cc,0x388c6fe85,0xda0e2d62d,0x10855dfe9,0x4d46efd6b,0x76ea12d61,0x9db377d3d,0xeed0efa71,0xe6ec3ae2f,0x441faee83,0xba19c8ff5,0x313035eab,0x6ce8f7625,0x880dab58d,0x8d3409e0d,0x2be92ee21,0xd60302c6c,0x469ffc724,0x87eebeed3,0x42587ef7a,0x7a8cc4e52,0x76a437650,0x999e41ef4,0x7d0969e42,0xc02baf46b,0x9259f3e47,0x2116a1dc0,0x9f2de4d84,0xeffac29,0x7b371ff8c,0x668339da9,0xd010aee3f,0x1cd00b4c0,0x95070fc3b,0xf84c9a770,0x38f863d76,0x3646ff045,0xce1b96412,0x7a5d45da8,0x14e00ef6c,0x5e95abfd8,0xb2e9cb729,0x36c47dd7,0xb8ee97c6b,0xe9e8f657,0xd4ad2ef1a,0x8811c7f32,0x47bde7c31,0x3adadfb64,0x6e5b28574,0x33e67cd91,0x2ab9fdd2d,0x8afa67f2b,0xe6a28fc5e,0x72049cdbd,0xae65dac12,0x1251a4526,0x1089ab841,0xe2f096ee0,0xb0caee573,0xfd6677e86,0x444b3f518,0xbe8b3a56a,0x680a75cfc,0xac02baea8,0x97d815e1c,0x1d4386e08,0x1a14f5b0e,0xe658a8d81,0xa3868efa7,0x3668a9673,0xe8fc53d85,0x2e2b7edd5,0x8b2470f13,0xf69795f32,0x4589ffc8e,0x2e2080c9c,0x64265f7d,0x3d714dd10,0x1692c6ef1,0x3e67f2f49,0x5041dad63,0x1a1503415,0x64c18c742,0xa72eec35,0x1f0f9dc60,0xa9559bc67,0xf32911d0d,0x21c0d4ffc,0xe01cef5b0,0x4e23a3520,0xaa4f04e49,0xe1c4fcc43,0x208e8f6e8,0x8486774a5,0x9e98c7558,0x2c59fb7dc,0x9446a4613,0x8292dcc2e,0x4d61631,0xd05527809,0xa0163852d,0x8f657f639,0xcca6c3e37,0xcb136bc7a,0xfc5a83e53,0x9aa44fc30,0xbdec1bd3c,0xe020b9f7c,0x4b8f35fb0,0xb8165f637,0x33dc88d69,0x10a2f7e4d,0xc8cb5ff53,0xde259ff6b,0x46d070dd4,0x32d3b9741,0x7075f1c04,0x4d58dbea0];
const APRILTAG_36H11: &'static [u64] = &[0xd5d628584,0xd97f18b49,0xdd280910e,0xe479e9c98,0xebcbca822,0xf31dab3ac,0x56a5d085,0x10652e1d4,0x22b1dfead,0x265ad0472,0x34fe91b86,0x3ff962cd5,0x43a25329a,0x474b4385f,0x4e9d243e9,0x5246149ae,0x5997f5538,0x683bb6c4c,0x6be4a7211,0x7e3158eea,0x81da494af,0x858339a74,0x8cd51a5fe,0x9f21cc2d7,0xa2cabc89c,0xadc58d9eb,0xb16e7dfb0,0xb8c05eb3a,0xd25ef139d,0xd607e1962,0xe4aba3076,0x2dde6a3da,0x43d40c678,0x5620be351,0x64c47fa65,0x686d7002a,0x6c16605ef,0x6fbf50bb4,0x8d06d39dc,0x9f53856b5,0xadf746dc9,0xbc9b084dd,0xd290aa77b,0xd9e28b305,0xe4dd5c454,0xfad2fe6f2,0x181a8151a,0x26be42c2e,0x2e10237b8,0x405cd5491,0x7742eab1c,0x85e6ac230,0x8d388cdba,0x9f853ea93,0xc41ea2445,0xcf1973594,0x14a34a333,0x31eacd15b,0x6c79d2dab,0x73cbb3935,0x89c155bd3,0x8d6a46198,0x91133675d,0xa708d89fb,0xae5ab9585,0xb9558a6d4,0xb98743ab2,0xd6cec68da,0x1506bcaef,0x4becd217a,0x4f95c273f,0x658b649dd,0xa76c4b1b7,0xecf621f56,0x1c8a56a57,0x3628e92ba,0x53706c0e2,0x5e6b3d231,0x7809cfa94,0xe97eead6f,0x5af40604a,0x7492988ad,0xed5994712,0x5eceaf9ed,0x7c1632815,0xc1a0095b4,0xe9e25d52b,0x3a6705419,0xa8333012f,0x4ce5704d0,0x508e60a95,0x877476120,0xa864e950d,0xea45cfce7,0x19da047e8,0x24d4d5937,0x6e079cc9b,0x99f2e11d7,0x33aa50429,0x499ff26c7,0x50f1d3251,0x66e7754ef,0x96ad633ce,0x9a5653993,0xaca30566c,0xc298a790a,0x8be44b65d,0xdc68f354b,0x16f7f919b,0x4dde0e826,0xd548cbd9f,0xe0439ceee,0xfd8b1fd16,0x76521bb7b,0xd92375742,0xcab16d40c,0x730c9dd72,0xad9ba39c2,0xb14493f87,0x52b15651f,0x185409cad,0x77ae2c68d,0x94f5af4b5,0xa13bad55,0x61ea437cd,0xa022399e2,0x203b163d1,0x7bba8f40e,0x95bc9442d,0x41c0b5358,0x8e9c6cc81,0xeb549670,0x9da3a0b51,0xd832a67a1,0xdcd4350bc,0x4aa05fdd2,0x60c7bb44e,0x4b358b96c,0x67299b45,0xb9c89b5fa,0x6975acaea,0x62b8f7afa,0x33567c3d7,0xbac139950,0xa5927c62a,0x5c916e6a4,0x260ecb7d5,0x29b7bbd9a,0x903205f26,0xae72270a4,0x3d2ec51a7,0x82ea55324,0x11a6f3427,0x1ca1c4576,0xa40c81aef,0xbddccd730,0xe617561e,0x969317b0f,0x67f781364,0x610912f96,0xb2549fdfc,0x6e5aaa6b,0xb6c475339,0xc56836a4d,0x844e351eb,0x4647f83b4,0x908a04f5,0x7f51034c9,0xaee537fca,0x5e92494ba,0xd445808f4,0x28d68b563,0x4d25374b,0x2bc065f65,0x96dc3ea0c,0x4b2ade817,0x7c3fd502,0xe768b5caf,0x17605cf6c,0x182741ee4,0x62846097c,0x72b5ebf80,0x263da6e13,0xfa841bcb5,0x7e45e8c69,0x653c81fa0,0x7443b5e70,0xa5234afd,0x74756f24e,0x157ebf02a,0x82ef46939,0x80d420264,0x2aeed3e98,0xb0a1dd4f8,0xb5436be13,0x7b7b4b13b,0x1ce80d6d3,0x16c08427d,0xee54462dd,0x1f7644cce,0x9c7b5cc92,0xe369138f8,0x5d5a66e91,0x485d62f49,0xe6e819e94,0xb1f340eb5,0x9d198ce2,0xd60717437,0x196b856c,0xf0a6173a5,0x12c0e1ec6,0x62b82d5cf,0xad154c067,0xce3778832,0x6b0a7b864,0x4c7686694,0x5058ff3ec,0xd5e21ea23,0x9ff4a76ee,0x9dd981019,0x1bad4d30a,0xc601896d1,0x973439b48,0x1ce7431a8,0x57a8021d6,0xf9dba96e6,0x83a2e4e7c,0x8ea585380,0xaf6c0e744,0x875b73bab,0xda34ca901,0x2ab9727ef,0xd39f21b9a,0x8a10b742f,0x5f8952dba,0xf8da71ab0,0xc25f9df96,0x6f8a5d94,0xe42e63e1a,0xb78409d1b,0x792229add,0x5acf8c455,0x2fc29a9b0,0xea486237b,0xb0c9685a0,0x1ad748a47,0x3b4712d5,0xf29216d30,0x8dad65e49,0xa2cf09dd,0xb5f174c6,0xe54f57743,0xb9cf54d78,0x4a312a88a,0x27babc962,0xb86897111,0xf2ff6c116,0x82274bd8a,0x97023505e,0x52d46edd1,0x585c1f538,0xbddd00e43,0x5590b74df,0x729404a1f,0x65320855e,0xd3d4b6956,0x7ae374f14,0x2d7a60e06,0x315cd9b5e,0xfd36b4eac,0xf1df7642b,0x55db27726,0x8f15ebc19,0x992f8c531,0x62dea2a40,0x928275cab,0x69c263cb9,0xa774cca9e,0x266b2110e,0x1b14acbb8,0x624b8a71b,0x1c539406b,0x3086d529b,0x111dd66e,0x98cd630bf,0x8b9d1ffdc,0x72b2f61e7,0x9ed9d672b,0x96cdd15f3,0x6366c2504,0x6ca9df73a,0xa066d60f0,0xe7a4b8add,0x8264647ef,0xaa195bf81,0x9a3db8244,0x14d2df6a,0xb63265b7,0x2f010de73,0x97e774986,0x248affc29,0xfb57dcd11,0xb1a7e4d9,0x4bfa2d07d,0x54e5cdf96,0x4c15c1c86,0xcd9c61166,0x499380b2a,0x540308d09,0x8b63fe66f,0xc81aeb35e,0x86fe0bd5c,0xce2480c2a,0x1ab29ee60,0x8048daa15,0xdbfeb2d39,0x567c9858c,0x2b6edc5bc,0x2078fca82,0xadacc22aa,0xb92486f49,0x51fac5964,0x691ee6420,0xf63b3e129,0x39be7e572,0xda2ce6c74,0x20cf17a5c,0xee55f9b6e,0xfb8572726,0xb2c2de548,0xcaa9bce92,0xae9182db3,0x74b6e5bd1,0x137b252af,0x51f686881,0xd672f6c02,0x654146ce4,0xf944bc825,0xe8327f809,0x76a73fd59,0xf79da4cb4,0x956f8099b,0x7b5f2655c,0xd06b114a6,0xd0697ca50,0x27c390797,0xbc61ed9b2,0xcc12dd19b,0xeb7818d2c,0x92fcecda,0x89ded4ea1,0x256a0ba34,0xb6948e627,0x1ef6b1054,0x8639294a2,0xeda3780a4,0x39ee2af1d,0xcd257edc5,0x2d9d6bc22,0x121d3b47d,0x37e23f8ad,0x119f31cf6,0x2c97f4f09,0xd502abfe0,0x10bc3ca77,0x53d7190ef,0x90c3e62a6,0x7e9ebf675,0x979ce23d1,0x27f0c98e9,0xeafb4ae59,0x7ca7fe2bd,0x1490ca8f6,0x9123387ba,0xb3bc73888,0x3ea87e325,0x4888964aa,0xa0188a6b9,0xcd383c666,0x40029a3fd,0xe1c00ac5c,0x39e6f2b6e,0xde664f622,0xe979a75e8,0x7c6b4c86c,0xfd492e071,0x8fbb35118,0x40b4a09b7,0xaf80bd6da,0x70e0b2521,0x2f5c54d93,0x3f4a118d5,0x9c1897b9,0x79776eac,0x84b00b17,0x3a95ad90e,0x28c544095,0x39d457c05,0x7a3791a78,0xbb770e22e,0x9a822bd6c,0x68a4b1fed,0xa5fd27b3b,0xc3995b79,0xd1519dff1,0x8e7eee359,0xcd3ca50b1,0xb73b8b793,0x57aca1c43,0xec2655277,0x785a2c1b3,0x75a07985a,0xa4b01eb69,0xa18a11347,0xdb1f28ca3,0x877ec3e25,0x31f6341b8,0x1363a3a4c,0x75d8b9ba,0x7ae0792a9,0xa83a21651,0x7f08f9fb5,0xd0cf73a9,0xb04dcc98e,0xf65c7b0f8,0x65ddaf69a,0x2cf9b86b3,0x14cb51e25,0xf48027b5b,0xec26ea8b,0x44bafd45c,0xb12c7c0c4,0x959fd9d82,0xc77c9725a,0x48a22d462,0x8398e8072,0xec89b05ce,0xbb682d4c9,0xe5a86d2ff,0x358f01134,0x8556ddcf6,0x67584b6e2,0x11609439f,0x8488816e,0xaaf1a2c46,0xf879898cf,0x8bbe5e2f7,0x101eee363,0x690f69377,0xf5bd93cd9,0xcea4c2bf6,0x9550be706,0x2c5b38a60,0xe72033547,0x4458b0629,0xee8d9ed41,0xd2f918d72,0x78dc39fd3,0x8212636f6,0x7450a72a7,0xc4f0cf4c6,0x367bcddcd,0xc1caf8cc6,0xa7f5b853d,0x9d536818b,0x535e021b0,0xa7eb8729e,0x422a67b49,0x929e928a6,0x48e8aefcc,0xa9897393c,0x5eb81d37e,0x1e80287b7,0x34770d903,0x2eef86728,0x59266ccb6,0x110bba61,0x1dfd284ef,0x447439d1b,0xfece0e599,0x9309f3703,0x80764d1dd,0x353f1e6a0,0x2c1c12dcc,0xc1d21b9d7,0x457ee453e,0xd66faf540,0x44831e652,0xcfd49a848,0x9312d4133,0x3f097d3ee,0x8c9ebef7a,0xa99e29e88,0xe9fab22c,0x4e748f4fb,0xecdee4288,0xabce5f1d0,0xc42f6876c,0x7ed402ea0,0xe5c4242c3,0xd5b2c31ae,0x286863be6,0x160444d94,0x5f0f5808e,0xae3d44b2a,0x9f5c5d109,0x8ad9316d7,0x3422ba064,0x2fed11d56,0xbea6e3e04,0x4b029eec,0x6deed7435,0x3718ce17c,0x55857f5e2,0x2edac7b62,0x85d6c512,0xd6ca88e0f,0x2b7e1fc69,0xa699d5c1b,0xf05ad74de,0x4cf5fb56d,0x5725e07e1,0x72f18a2de,0x1cec52609,0x48534243c,0x2523a4d69,0x35c1b80d1,0xa4d7338a7,0xdb1af012,0xe61a9475d,0x5df03f91,0x97ae260bb,0x32d627fef,0xb640f73c2,0x45a1ac9c6,0x6a2202de1,0x57d3e25f2,0x5aa9f986e,0xcc859d8a,0xe3ec6cca8,0x54e95e1ae,0x446887b06,0x7516732be,0x3817ac8f5,0x3e26d938c,0xaa81bc235,0xdf387ca1b,0xf3a3b3f2,0xb4bf69677,0xae21868ed,0x81e1d2d9d,0xa0a9ea14c,0x8eee297a9,0x4740c0559,0xe8b141837,0xac69e0a3d,0x9ed83a1e1,0x5edb55ecb,0x7340fe81,0x50dfbc6bf,0x4f583508a,0xcb1fb78bc,0x4025ced2f,0x39791ebec,0x53ee388f1,0x7d6c0bd23,0x93a995fbe,0x8a41728de,0x2fe70e053,0xab3db443a,0x1364edb05,0x47b6eeed6,0x12e71af01,0x52ff83587,0x3a1575dd8,0x3feaa3564,0xeacf78ba7,0x872b94f8,0xda8ddf9a2,0x9aa920d2b,0x1f350ed36,0x18a5e861f,0x2c35b89c3,0x3347ac48a,0x7f23e022e,0x2459068fb,0xe83be4b73];

#[derive(Copy, Clone, Debug)]
pub struct ARDictionary {
	//code_to_id: HashMap<u64, usize>,
	pub num_bits: u8,
	pub tau: u8,
	pub code_list: &'static [u64],
}

pub static AR_DICTIONARIES: phf::Map<&'static str, ARDictionary> = phf_map! {
	"ARUCO" => ARDictionary {
		num_bits: 25,
		tau: 3,
		code_list: ARUCO
	},
	"ARUCO_MIP_36h12" => ARDictionary {
    	num_bits: 36,
    	tau: 12,
    	code_list: ARUCO_MIP_36H12
	},
	"ARUCO_DEFAULT" => ARDictionary {
		num_bits: 25,
		tau: 3,
		code_list: ARUCO_DEFAULT,
	},
	"APRILTAG_36H11" => ARDictionary {
		num_bits: 36,
		tau: 11,
		code_list: APRILTAG_36H11, 
	},
};

impl ARDictionary {
	pub fn new_from_ar_dictionary(d: &ARDictionary) -> Self {
		let mut code_to_id = HashMap::new();
		for (i, code) in d.code_list.iter().enumerate() {
			code_to_id.insert(*code, i);
		}

		ARDictionary {
			code_list: d.code_list,
			tau: if d.tau == 0 { ARDictionary::calculate_tau(d.code_list) } else { d.tau },
			num_bits: d.num_bits,
		}
	}

	fn calculate_tau(code_list: &'static [u64]) -> u8 {
		let mut tau = 255;
		for i in 0..code_list.len() {
			for j in (i+1)..code_list.len() {
				let dist = hamming_distance(code_list[i], code_list[j]);
				tau = tau.min(dist);
			}
		}
		tau
	}

	pub fn new_from_named_dict(code_name: &str) -> Self {
		if let Some(d) = AR_DICTIONARIES.get(code_name) {
			return Self::new_from_ar_dictionary(d);
		}
		panic!("TODO: code for this dict is not implemented.")
	}

	/// Gets the width of the marker to be rendered _INCLUDING THE BOUNDARY BITS_.
	/// For example: the APRILTAG 36H11 is 6x6 plus a one pixel border on each side, making it 8x8.
	/// For the number of bits in the code, look at num_bits.
	pub fn get_mark_size(&self) -> u8 {
		(self.num_bits as f32).sqrt().ceil() as u8 + 2
	}

	/// Search the dictionary for the nearest code (by hamming distance).
	/// Iterates across all elements in the code list, then returns the ID and the hamming distance
	pub fn find_nearest(&self, bits: u64) -> (usize, u8) {
		// The original implementation had this, which seems to do a search for an exact match, but we get that with the min hamming distance, too.
		/*
		  var val = '', i, j;
		  for (i = 0; i < bits.length; i++) {
		    var bitRow = bits[i];
		    for (j = 0; j < bitRow.length; j++) {
		      val += bitRow[j];
		    }
		  }
		  var minFound = this.codes[val];
		  if (minFound)
		    return {
		      id: minFound.id,
		      distance: 0
		    };
		*/
		// Build a default if we happen to not find anything.
		//let mut min_id: usize = 0;
		let mut found = false;
		let mut min_index: usize = 0;
		let mut min_code: u64 = 0;
		let mut min_distance: u8 = 0xFFu8;

		for (idx, c) in self.code_list.iter().enumerate() {
			let dist = hamming_distance(*c, bits);
			if dist < min_distance {
				found = true;
				min_distance = dist;
				min_index = idx;
				min_code = *c;
				//min_id = *self.code_to_id.get(&c).expect("CRITICAL: code_list contained an entry that was not found in the code_to_id mapping.");
			}
		}

		(min_index, min_distance)
	}

	/// Search the dictionary for the nearest matching code and return Some(id, dist) if found AND dist is less than tau.
	/// This will return None if the nearest distance is greater than the error bars for the code set.
 	pub fn try_find_nearest(&self, bits: u64) -> Option<(usize, u8)> {
 		let (id, dist) = self.find_nearest(bits);
 		if dist < self.tau {
 			return Some((id, dist));
 		} else {
 			return None;
 		}
	}
	
	/// Generate a binary 'image' of the given marker ID and return a tuple of (width, bits).
	/// Markers are square, so no height needs to be provided.
	/// TOOD: Are these returned upside down? I don't remember the packing order of the bytes.
	pub fn make_binary_image(&self, marker_id: usize) -> (u8, Vec<bool>) {
		let code = self.code_list[marker_id];
		let width = self.get_mark_size();
		let mut bits = vec![];
		for _ in 0..width {
			bits.push(false);
		}
		for i in 0..self.num_bits {
			if bits.len() as u8 % width == 0 {
				bits.push(false);
			}
			bits.push(code & (1 << i) != 0);
			if bits.len() as u8 % width == width-1 {
				bits.push(false);
			}
		}
		for _ in 0..width {
			bits.push(false);
		}
		(width, bits)
	}
}

#[cfg(test)]
mod tests {
	use super::*;

	#[test]
	fn test_tau_sanity() {
		let d = ARDictionary::new_from_named_dict("ARUCO_DEFAULT");
		assert_eq!(d.tau, 3);
	}

	#[test]
	fn test_find_nearest_aruco_default() {
		let d = ARDictionary::new_from_named_dict("ARUCO_DEFAULT");
		let (mut nearest_idx, mut dist) = d.find_nearest(0x1084210);
		assert_eq!(nearest_idx, 0);
		assert_eq!(dist, 0);

		// 0x1084209 == id2
		// 0b00000001_00001000_01000010_00001001
		(nearest_idx, dist) = d.find_nearest(0x1084209);
		assert_eq!(nearest_idx, 2);
		assert_eq!(dist, 0);

		(nearest_idx, dist) = d.find_nearest(0b00000001_00001000_01000010_00001001);
		assert_eq!(nearest_idx, 2);
		assert_eq!(dist, 0);

		(nearest_idx, dist) = d.find_nearest(0b00000001_00001000_01000010_10001001);
		assert_eq!(nearest_idx, 2);
		assert_eq!(dist, 1);

		(nearest_idx, dist) = d.find_nearest(0x1084217);
		assert_eq!(nearest_idx, 1);
		assert_eq!(dist, 0);
	}

	#[test]
	fn test_try_find_nearest_aruco_default() {
		let d = ARDictionary::new_from_named_dict("ARUCO_DEFAULT");
		// let maybe_match = d.try_find_nearest(0b00000001_00001000_01000010_00001001);
		let maybe_match = d.try_find_nearest(0b01100001_00001000_01000010_00001001);
		assert!(maybe_match.is_some());
		assert_eq!(maybe_match.unwrap().0, 2);

		let maybe_match = d.try_find_nearest(0b11111111_0000100_01000010_00001001);
		assert!(maybe_match.is_none());
	}
}
